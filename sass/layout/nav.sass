// .main-nav
//   padding: 0
//   margin: 0
.main-nav
  position: absolute
  top: 0
  // bottom: 0
  right: 0
  left: 100%
  // width: 100vw
  font-size: 2rem

  overflow: hidden

  // animation
  transition: all ease-in-out 250ms

  // For <ul> tag
  .unstyled-list
    display: flex
    flex-direction: column
    justify-content: space-around
    height: 100vh
    // background: black


  li
    flex: 1 1 auto
    // flex is the shorthand property for flex-grow / flex-shrink / flex-basis. It accepts 3 values.
    //  flex-grow:    1
    //  flex-shrink:  1
    //  flex-basis:   auto
    // border-bottom: 1px solid rgba(0, 0, 0, 0.15)
    border: 0
    display: flex
    // justify-content: center
    // align-items: center
    // By default, items with flex will take up the whole space unless we use justify-content/align-items.
    // However, we DO NOT want to make the <li> tag centered because nothing will happen when we click on a <li> tag. what we want is to make the <a> tag centered.

  a
    color: $black

    text-decoration: none
    flex-basis: 100%
    // flex-basis 100% is to take up the whole horizontal space for each button.
    display: flex
    // this is to make the TEXT or WORDS enclosed within the <a> tag a flex item, so now we can use align-items and justify-content on the TEXT to make it centered.
    align-items: center
    justify-content: center

    background: $white

    z-index: 2

    &:hover, &:focus
      background: $accent
      color: $text-inverse

  // a.active.is-highlighted
  //   background: $accent
  //   color: $text-inverse

  // responsive mobile navbar for .main-nav class
  &.is-open
    left: 0
    // earlier on, we made it left: 100% & overflow: hidden

// Hamburger Menu
.nav-toggle
  display: block
  // background: pink
  padding: 1em
  position: absolute
  top: 1em
  right: 1em
  cursor: pointer

  z-index: 3

.hamburger, .hamburger::before, .hamburger::after
  content: ''
  display: block
  width: 2em
  height: 3px
  background: $text-inverse
  transition: all ease-in-out 250ms


.hamburger::before
  transform: translateY(-6px)

.hamburger::after
  transform: translateY(3px)
  // Because hamburger has properties:
        content: ''   &
        display: block
  // this means that .hamburger::before is taking the place of .hamburger ON TOP of it. (think of it as .hamburger::before FLOATING on TOP of .hamburger) Therefore, the distance .hamburger::before has to move it TWICE that of .hamburger::after.
  // (use inspector tools to understand.)

.hamburger.is-open
  transform: rotate(45deg)
  background: $black

  &::after
    transform: rotate(-90deg) translateX(3px)
    //    this will make the hamburger lines cross each other in opposite direction.

    // transform: rotate(90deg) translateX(-3px)
    //  this will make the hamburger lines cross each other in same direction.
    background: $black

  &::before
    // display: none
    //    this will make the top hamburger line disappear suddenly.

    opacity: 0
    // if we use opacity: 0 then we have to adjust the .hamburger.is-open and .hamburger.is-open::after accordingly or else they will not be symmetrical.
